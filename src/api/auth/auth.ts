/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Sensorium API
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  Activation,
  AuthCode,
  AuthDeviceTokenCreateErrorResponse400,
  AuthGenerateDeviceCodeCreateErrorResponse400,
  AuthTokenLoginCreateErrorResponse400,
  AuthTokenLogoutCreateErrorResponse400,
  AuthUsersActivationCreateErrorResponse400,
  AuthUsersCreateErrorResponse400,
  AuthUsersDestroyErrorResponse400,
  AuthUsersListErrorResponse400,
  AuthUsersMeDestroyErrorResponse400,
  AuthUsersMePartialUpdateErrorResponse400,
  AuthUsersMeRetrieveErrorResponse400,
  AuthUsersMeUpdateErrorResponse400,
  AuthUsersPartialUpdateErrorResponse400,
  AuthUsersResendActivationCreateErrorResponse400,
  AuthUsersResetPasswordConfirmCreateErrorResponse400,
  AuthUsersResetPasswordCreateErrorResponse400,
  AuthUsersResetUsernameConfirmCreateErrorResponse400,
  AuthUsersResetUsernameCreateErrorResponse400,
  AuthUsersRetrieveErrorResponse400,
  AuthUsersSetPasswordCreateErrorResponse400,
  AuthUsersSetUsernameCreateErrorResponse400,
  AuthUsersUpdateErrorResponse400,
  DeviceToken,
  ErrorResponse401,
  ErrorResponse403,
  ErrorResponse404,
  ErrorResponse405,
  ErrorResponse406,
  ErrorResponse415,
  ErrorResponse500,
  Errors,
  PasswordResetConfirm,
  PatchedUser,
  SendEmailReset,
  SetPassword,
  SetUsername,
  TokenCreate,
  TokenResponse,
  User,
  UserCreate,
  UsernameResetConfirm,
} from "../../models";
import { customInstance } from "../../providers/axios";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
  T
>() => T extends Y ? 1 : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–≤–∞–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø–∞—Ä–æ–ª—è.
 */
export const authDeviceTokenCreate = (
  authCode: AuthCode,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<DeviceToken>(
    {
      url: `/api/v1/auth/device-token/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: authCode,
    },
    options
  );
};

export const getAuthDeviceTokenCreateMutationOptions = <
  TError =
    | AuthDeviceTokenCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | Errors
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authDeviceTokenCreate>>,
    TError,
    { data: AuthCode },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authDeviceTokenCreate>>,
  TError,
  { data: AuthCode },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authDeviceTokenCreate>>,
    { data: AuthCode }
  > = (props) => {
    const { data } = props ?? {};

    return authDeviceTokenCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthDeviceTokenCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authDeviceTokenCreate>>
>;
export type AuthDeviceTokenCreateMutationBody = AuthCode;
export type AuthDeviceTokenCreateMutationError =
  | AuthDeviceTokenCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | Errors
  | ErrorResponse500;

export const useAuthDeviceTokenCreate = <
  TError =
    | AuthDeviceTokenCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | Errors
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authDeviceTokenCreate>>,
    TError,
    { data: AuthCode },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthDeviceTokenCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–≤–∞–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
export const authGenerateDeviceCodeCreate = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<AuthCode>(
    { url: `/api/v1/auth/generate-device-code/`, method: "POST" },
    options
  );
};

export const getAuthGenerateDeviceCodeCreateMutationOptions = <
  TError =
    | AuthGenerateDeviceCodeCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authGenerateDeviceCodeCreate>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authGenerateDeviceCodeCreate>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authGenerateDeviceCodeCreate>>,
    TVariables
  > = () => {
    return authGenerateDeviceCodeCreate(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthGenerateDeviceCodeCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authGenerateDeviceCodeCreate>>
>;

export type AuthGenerateDeviceCodeCreateMutationError =
  | AuthGenerateDeviceCodeCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthGenerateDeviceCodeCreate = <
  TError =
    | AuthGenerateDeviceCodeCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authGenerateDeviceCodeCreate>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getAuthGenerateDeviceCodeCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Use this endpoint to obtain user authentication token.
 */
export const authTokenLoginCreate = (
  tokenCreate: TokenCreate,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<TokenResponse>(
    {
      url: `/api/v1/auth/token/login/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: tokenCreate,
    },
    options
  );
};

export const getAuthTokenLoginCreateMutationOptions = <
  TError =
    | AuthTokenLoginCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authTokenLoginCreate>>,
    TError,
    { data: TokenCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authTokenLoginCreate>>,
  TError,
  { data: TokenCreate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authTokenLoginCreate>>,
    { data: TokenCreate }
  > = (props) => {
    const { data } = props ?? {};

    return authTokenLoginCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthTokenLoginCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authTokenLoginCreate>>
>;
export type AuthTokenLoginCreateMutationBody = TokenCreate;
export type AuthTokenLoginCreateMutationError =
  | AuthTokenLoginCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthTokenLoginCreate = <
  TError =
    | AuthTokenLoginCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authTokenLoginCreate>>,
    TError,
    { data: TokenCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthTokenLoginCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Use this endpoint to logout user (remove user authentication token).
 */
export const authTokenLogoutCreate = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/v1/auth/token/logout/`, method: "POST" },
    options
  );
};

export const getAuthTokenLogoutCreateMutationOptions = <
  TError =
    | AuthTokenLogoutCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authTokenLogoutCreate>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authTokenLogoutCreate>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authTokenLogoutCreate>>,
    TVariables
  > = () => {
    return authTokenLogoutCreate(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthTokenLogoutCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authTokenLogoutCreate>>
>;

export type AuthTokenLogoutCreateMutationError =
  | AuthTokenLogoutCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthTokenLogoutCreate = <
  TError =
    | AuthTokenLogoutCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authTokenLogoutCreate>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthTokenLogoutCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersList = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<User[]>(
    { url: `/api/v1/auth/users/`, method: "GET", signal },
    options
  );
};

export const getAuthUsersListQueryKey = () => {
  return [`/api/v1/auth/users/`] as const;
};

export const getAuthUsersListQueryOptions = <
  TData = Awaited<ReturnType<typeof authUsersList>>,
  TError =
    | AuthUsersListErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authUsersList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthUsersListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authUsersList>>> = ({
    signal,
  }) => authUsersList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authUsersList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthUsersListQueryResult = NonNullable<
  Awaited<ReturnType<typeof authUsersList>>
>;
export type AuthUsersListQueryError =
  | AuthUsersListErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersList = <
  TData = Awaited<ReturnType<typeof authUsersList>>,
  TError =
    | AuthUsersListErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authUsersList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthUsersListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const authUsersCreate = (
  userCreate: NonReadonly<UserCreate>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UserCreate>(
    {
      url: `/api/v1/auth/users/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: userCreate,
    },
    options
  );
};

export const getAuthUsersCreateMutationOptions = <
  TError =
    | AuthUsersCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersCreate>>,
    TError,
    { data: NonReadonly<UserCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersCreate>>,
  TError,
  { data: NonReadonly<UserCreate> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersCreate>>,
    { data: NonReadonly<UserCreate> }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersCreate>>
>;
export type AuthUsersCreateMutationBody = NonReadonly<UserCreate>;
export type AuthUsersCreateMutationError =
  | AuthUsersCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersCreate = <
  TError =
    | AuthUsersCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersCreate>>,
    TError,
    { data: NonReadonly<UserCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersRetrieve = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<User>(
    { url: `/api/v1/auth/users/${id}/`, method: "GET", signal },
    options
  );
};

export const getAuthUsersRetrieveQueryKey = (id: number) => {
  return [`/api/v1/auth/users/${id}/`] as const;
};

export const getAuthUsersRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof authUsersRetrieve>>,
  TError =
    | AuthUsersRetrieveErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse404
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authUsersRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthUsersRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authUsersRetrieve>>
  > = ({ signal }) => authUsersRetrieve(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof authUsersRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthUsersRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof authUsersRetrieve>>
>;
export type AuthUsersRetrieveQueryError =
  | AuthUsersRetrieveErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse404
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersRetrieve = <
  TData = Awaited<ReturnType<typeof authUsersRetrieve>>,
  TError =
    | AuthUsersRetrieveErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse404
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authUsersRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthUsersRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const authUsersUpdate = (
  id: number,
  user: NonReadonly<User>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<User>(
    {
      url: `/api/v1/auth/users/${id}/`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: user,
    },
    options
  );
};

export const getAuthUsersUpdateMutationOptions = <
  TError =
    | AuthUsersUpdateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse404
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersUpdate>>,
    TError,
    { id: number; data: NonReadonly<User> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersUpdate>>,
  TError,
  { id: number; data: NonReadonly<User> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersUpdate>>,
    { id: number; data: NonReadonly<User> }
  > = (props) => {
    const { id, data } = props ?? {};

    return authUsersUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersUpdate>>
>;
export type AuthUsersUpdateMutationBody = NonReadonly<User>;
export type AuthUsersUpdateMutationError =
  | AuthUsersUpdateErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse404
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersUpdate = <
  TError =
    | AuthUsersUpdateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse404
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersUpdate>>,
    TError,
    { id: number; data: NonReadonly<User> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersPartialUpdate = (
  id: number,
  patchedUser: NonReadonly<PatchedUser>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<User>(
    {
      url: `/api/v1/auth/users/${id}/`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchedUser,
    },
    options
  );
};

export const getAuthUsersPartialUpdateMutationOptions = <
  TError =
    | AuthUsersPartialUpdateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse404
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersPartialUpdate>>,
    TError,
    { id: number; data: NonReadonly<PatchedUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersPartialUpdate>>,
  TError,
  { id: number; data: NonReadonly<PatchedUser> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersPartialUpdate>>,
    { id: number; data: NonReadonly<PatchedUser> }
  > = (props) => {
    const { id, data } = props ?? {};

    return authUsersPartialUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersPartialUpdate>>
>;
export type AuthUsersPartialUpdateMutationBody = NonReadonly<PatchedUser>;
export type AuthUsersPartialUpdateMutationError =
  | AuthUsersPartialUpdateErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse404
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersPartialUpdate = <
  TError =
    | AuthUsersPartialUpdateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse404
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersPartialUpdate>>,
    TError,
    { id: number; data: NonReadonly<PatchedUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersDestroy = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/v1/auth/users/${id}/`, method: "DELETE" },
    options
  );
};

export const getAuthUsersDestroyMutationOptions = <
  TError =
    | AuthUsersDestroyErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse404
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersDestroy>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return authUsersDestroy(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersDestroy>>
>;

export type AuthUsersDestroyMutationError =
  | AuthUsersDestroyErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse404
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersDestroy = <
  TError =
    | AuthUsersDestroyErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse404
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersDestroy>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersActivationCreate = (
  activation: Activation,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Activation>(
    {
      url: `/api/v1/auth/users/activation/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: activation,
    },
    options
  );
};

export const getAuthUsersActivationCreateMutationOptions = <
  TError =
    | AuthUsersActivationCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersActivationCreate>>,
    TError,
    { data: Activation },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersActivationCreate>>,
  TError,
  { data: Activation },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersActivationCreate>>,
    { data: Activation }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersActivationCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersActivationCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersActivationCreate>>
>;
export type AuthUsersActivationCreateMutationBody = Activation;
export type AuthUsersActivationCreateMutationError =
  | AuthUsersActivationCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersActivationCreate = <
  TError =
    | AuthUsersActivationCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersActivationCreate>>,
    TError,
    { data: Activation },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersActivationCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersMeRetrieve = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<User>(
    { url: `/api/v1/auth/users/me/`, method: "GET", signal },
    options
  );
};

export const getAuthUsersMeRetrieveQueryKey = () => {
  return [`/api/v1/auth/users/me/`] as const;
};

export const getAuthUsersMeRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof authUsersMeRetrieve>>,
  TError =
    | AuthUsersMeRetrieveErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authUsersMeRetrieve>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthUsersMeRetrieveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authUsersMeRetrieve>>
  > = ({ signal }) => authUsersMeRetrieve(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authUsersMeRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthUsersMeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof authUsersMeRetrieve>>
>;
export type AuthUsersMeRetrieveQueryError =
  | AuthUsersMeRetrieveErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersMeRetrieve = <
  TData = Awaited<ReturnType<typeof authUsersMeRetrieve>>,
  TError =
    | AuthUsersMeRetrieveErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authUsersMeRetrieve>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthUsersMeRetrieveQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const authUsersMeUpdate = (
  user: NonReadonly<User>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<User>(
    {
      url: `/api/v1/auth/users/me/`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: user,
    },
    options
  );
};

export const getAuthUsersMeUpdateMutationOptions = <
  TError =
    | AuthUsersMeUpdateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersMeUpdate>>,
    TError,
    { data: NonReadonly<User> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersMeUpdate>>,
  TError,
  { data: NonReadonly<User> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersMeUpdate>>,
    { data: NonReadonly<User> }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersMeUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersMeUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersMeUpdate>>
>;
export type AuthUsersMeUpdateMutationBody = NonReadonly<User>;
export type AuthUsersMeUpdateMutationError =
  | AuthUsersMeUpdateErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersMeUpdate = <
  TError =
    | AuthUsersMeUpdateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersMeUpdate>>,
    TError,
    { data: NonReadonly<User> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersMeUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersMePartialUpdate = (
  patchedUser: NonReadonly<PatchedUser>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<User>(
    {
      url: `/api/v1/auth/users/me/`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchedUser,
    },
    options
  );
};

export const getAuthUsersMePartialUpdateMutationOptions = <
  TError =
    | AuthUsersMePartialUpdateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersMePartialUpdate>>,
    TError,
    { data: NonReadonly<PatchedUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersMePartialUpdate>>,
  TError,
  { data: NonReadonly<PatchedUser> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersMePartialUpdate>>,
    { data: NonReadonly<PatchedUser> }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersMePartialUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersMePartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersMePartialUpdate>>
>;
export type AuthUsersMePartialUpdateMutationBody = NonReadonly<PatchedUser>;
export type AuthUsersMePartialUpdateMutationError =
  | AuthUsersMePartialUpdateErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersMePartialUpdate = <
  TError =
    | AuthUsersMePartialUpdateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersMePartialUpdate>>,
    TError,
    { data: NonReadonly<PatchedUser> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersMePartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersMeDestroy = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/v1/auth/users/me/`, method: "DELETE" },
    options
  );
};

export const getAuthUsersMeDestroyMutationOptions = <
  TError =
    | AuthUsersMeDestroyErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersMeDestroy>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersMeDestroy>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersMeDestroy>>,
    TVariables
  > = () => {
    return authUsersMeDestroy(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersMeDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersMeDestroy>>
>;

export type AuthUsersMeDestroyMutationError =
  | AuthUsersMeDestroyErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersMeDestroy = <
  TError =
    | AuthUsersMeDestroyErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersMeDestroy>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersMeDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersResendActivationCreate = (
  sendEmailReset: SendEmailReset,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SendEmailReset>(
    {
      url: `/api/v1/auth/users/resend_activation/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: sendEmailReset,
    },
    options
  );
};

export const getAuthUsersResendActivationCreateMutationOptions = <
  TError =
    | AuthUsersResendActivationCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResendActivationCreate>>,
    TError,
    { data: SendEmailReset },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersResendActivationCreate>>,
  TError,
  { data: SendEmailReset },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersResendActivationCreate>>,
    { data: SendEmailReset }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersResendActivationCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersResendActivationCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersResendActivationCreate>>
>;
export type AuthUsersResendActivationCreateMutationBody = SendEmailReset;
export type AuthUsersResendActivationCreateMutationError =
  | AuthUsersResendActivationCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersResendActivationCreate = <
  TError =
    | AuthUsersResendActivationCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResendActivationCreate>>,
    TError,
    { data: SendEmailReset },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getAuthUsersResendActivationCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersResetPasswordCreate = (
  sendEmailReset: SendEmailReset,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SendEmailReset>(
    {
      url: `/api/v1/auth/users/reset_password/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: sendEmailReset,
    },
    options
  );
};

export const getAuthUsersResetPasswordCreateMutationOptions = <
  TError =
    | AuthUsersResetPasswordCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResetPasswordCreate>>,
    TError,
    { data: SendEmailReset },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersResetPasswordCreate>>,
  TError,
  { data: SendEmailReset },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersResetPasswordCreate>>,
    { data: SendEmailReset }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersResetPasswordCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersResetPasswordCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersResetPasswordCreate>>
>;
export type AuthUsersResetPasswordCreateMutationBody = SendEmailReset;
export type AuthUsersResetPasswordCreateMutationError =
  | AuthUsersResetPasswordCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersResetPasswordCreate = <
  TError =
    | AuthUsersResetPasswordCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResetPasswordCreate>>,
    TError,
    { data: SendEmailReset },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getAuthUsersResetPasswordCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersResetPasswordConfirmCreate = (
  passwordResetConfirm: PasswordResetConfirm,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PasswordResetConfirm>(
    {
      url: `/api/v1/auth/users/reset_password_confirm/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: passwordResetConfirm,
    },
    options
  );
};

export const getAuthUsersResetPasswordConfirmCreateMutationOptions = <
  TError =
    | AuthUsersResetPasswordConfirmCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResetPasswordConfirmCreate>>,
    TError,
    { data: PasswordResetConfirm },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersResetPasswordConfirmCreate>>,
  TError,
  { data: PasswordResetConfirm },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersResetPasswordConfirmCreate>>,
    { data: PasswordResetConfirm }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersResetPasswordConfirmCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersResetPasswordConfirmCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersResetPasswordConfirmCreate>>
>;
export type AuthUsersResetPasswordConfirmCreateMutationBody =
  PasswordResetConfirm;
export type AuthUsersResetPasswordConfirmCreateMutationError =
  | AuthUsersResetPasswordConfirmCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersResetPasswordConfirmCreate = <
  TError =
    | AuthUsersResetPasswordConfirmCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResetPasswordConfirmCreate>>,
    TError,
    { data: PasswordResetConfirm },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getAuthUsersResetPasswordConfirmCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersResetUsernameCreate = (
  sendEmailReset: SendEmailReset,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SendEmailReset>(
    {
      url: `/api/v1/auth/users/reset_username/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: sendEmailReset,
    },
    options
  );
};

export const getAuthUsersResetUsernameCreateMutationOptions = <
  TError =
    | AuthUsersResetUsernameCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResetUsernameCreate>>,
    TError,
    { data: SendEmailReset },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersResetUsernameCreate>>,
  TError,
  { data: SendEmailReset },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersResetUsernameCreate>>,
    { data: SendEmailReset }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersResetUsernameCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersResetUsernameCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersResetUsernameCreate>>
>;
export type AuthUsersResetUsernameCreateMutationBody = SendEmailReset;
export type AuthUsersResetUsernameCreateMutationError =
  | AuthUsersResetUsernameCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersResetUsernameCreate = <
  TError =
    | AuthUsersResetUsernameCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResetUsernameCreate>>,
    TError,
    { data: SendEmailReset },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getAuthUsersResetUsernameCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersResetUsernameConfirmCreate = (
  usernameResetConfirm: UsernameResetConfirm,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UsernameResetConfirm>(
    {
      url: `/api/v1/auth/users/reset_username_confirm/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: usernameResetConfirm,
    },
    options
  );
};

export const getAuthUsersResetUsernameConfirmCreateMutationOptions = <
  TError =
    | AuthUsersResetUsernameConfirmCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResetUsernameConfirmCreate>>,
    TError,
    { data: UsernameResetConfirm },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersResetUsernameConfirmCreate>>,
  TError,
  { data: UsernameResetConfirm },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersResetUsernameConfirmCreate>>,
    { data: UsernameResetConfirm }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersResetUsernameConfirmCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersResetUsernameConfirmCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersResetUsernameConfirmCreate>>
>;
export type AuthUsersResetUsernameConfirmCreateMutationBody =
  UsernameResetConfirm;
export type AuthUsersResetUsernameConfirmCreateMutationError =
  | AuthUsersResetUsernameConfirmCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersResetUsernameConfirmCreate = <
  TError =
    | AuthUsersResetUsernameConfirmCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersResetUsernameConfirmCreate>>,
    TError,
    { data: UsernameResetConfirm },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getAuthUsersResetUsernameConfirmCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersSetPasswordCreate = (
  setPassword: SetPassword,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SetPassword>(
    {
      url: `/api/v1/auth/users/set_password/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: setPassword,
    },
    options
  );
};

export const getAuthUsersSetPasswordCreateMutationOptions = <
  TError =
    | AuthUsersSetPasswordCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersSetPasswordCreate>>,
    TError,
    { data: SetPassword },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersSetPasswordCreate>>,
  TError,
  { data: SetPassword },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersSetPasswordCreate>>,
    { data: SetPassword }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersSetPasswordCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersSetPasswordCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersSetPasswordCreate>>
>;
export type AuthUsersSetPasswordCreateMutationBody = SetPassword;
export type AuthUsersSetPasswordCreateMutationError =
  | AuthUsersSetPasswordCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersSetPasswordCreate = <
  TError =
    | AuthUsersSetPasswordCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersSetPasswordCreate>>,
    TError,
    { data: SetPassword },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersSetPasswordCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authUsersSetUsernameCreate = (
  setUsername: SetUsername,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SetUsername>(
    {
      url: `/api/v1/auth/users/set_username/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: setUsername,
    },
    options
  );
};

export const getAuthUsersSetUsernameCreateMutationOptions = <
  TError =
    | AuthUsersSetUsernameCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersSetUsernameCreate>>,
    TError,
    { data: SetUsername },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUsersSetUsernameCreate>>,
  TError,
  { data: SetUsername },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUsersSetUsernameCreate>>,
    { data: SetUsername }
  > = (props) => {
    const { data } = props ?? {};

    return authUsersSetUsernameCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUsersSetUsernameCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authUsersSetUsernameCreate>>
>;
export type AuthUsersSetUsernameCreateMutationBody = SetUsername;
export type AuthUsersSetUsernameCreateMutationError =
  | AuthUsersSetUsernameCreateErrorResponse400
  | ErrorResponse401
  | ErrorResponse403
  | ErrorResponse405
  | ErrorResponse406
  | ErrorResponse415
  | ErrorResponse500;

export const useAuthUsersSetUsernameCreate = <
  TError =
    | AuthUsersSetUsernameCreateErrorResponse400
    | ErrorResponse401
    | ErrorResponse403
    | ErrorResponse405
    | ErrorResponse406
    | ErrorResponse415
    | ErrorResponse500,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUsersSetUsernameCreate>>,
    TError,
    { data: SetUsername },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getAuthUsersSetUsernameCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
